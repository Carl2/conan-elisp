* Conan 2.0 (elisp support)

The purpose of this elisp-module is to enable the use of /conan 2.0/
libraries to retain flags for c++ in elisp. This is particularly good
when using for example /babel/ in org-mode to make small snippets of
c++ code that uses some external library. This can be achieved through *:flags* header
option in org-mode source-code mode ( @see [[https://orgmode.org/manual/Working-with-Source-Code.html][org-mode, working with source code]]).
It is by no means restricted to /org-mode/.

see [[https://docs.conan.io/2/][conan 2]].

* Install
Make sure /Conan 2.0/ is installed (see [[https://docs.conan.io/2/][conan2]]) , and that /pkg-config/ is available on the system.
Then install the /conan-elisp/ module.
#+begin_src emacs-lisp
  (use-package conan
    :ensure t
    )
#+end_src

That should be enough.

* conan-install



** Usage
~(conan-install CONAN-LIBS-LIST FLAGS &optional pre-flags post-flags)~

CONAN-LIBS-LIST is a string containing the names and versions of the Conan
packages to be installed, separated by space. For example: "fmt/8.1.1 zlib/1.2.13".

FLAGS is expected to be one of the symbols 'include, 'libs, 'both, or 'all.
These options specify which Conan package information to extract:

- 'include extracts the include paths for the Conan packages.
- 'libs extracts the library paths for the Conan packages.
- 'both extracts both the include and library paths for the Conan packages.
- 'all is equivalent to 'both.

The function first extracts the Conan package names and versions from CONAN-LIBS-LIST
and calls the `conan-install` function to install the packages.
It then extracts the include and/or library paths for the installed packages
based on the FLAGS option, and sets the corresponding Emacs Lisp variables to
these paths.

/pre-flags/ are extra flags to the compiler before the conan library flags.

/post-flags/ are flags which are post the conan library flags


#+HEADER: :eval never-export :wrap example :exports both
#+begin_src emacs-lisp
  ;; Examples
  (conan-install "fmt/10.1.1 sml/1.1.6 zlib/1.2.13" 'all)
  ;; With pre flags
  (conan-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra")
  ;; -std=c++20 -Wall -Wextra \
  ;; -I/home/calle/.conan2/p/b/fmt3a721e0ef9ede/p/include \
  ;; -I/home/calle/.conan2/p/sml056dfa7919d57/p/include \-L
  ;; /home/calle/.conan2/p/b/fmt3a721e0ef9ede/p/lib -lfmt -lm
  ;; With post flags
  (conan-install "fmt/10.1.1 sml/1.1.9" 'all nil "-std=c++20 -Wall -Wextra")
  ;; -I/home/user/.conan2/p/b/fmt3a721e0ef9ede/p/include \
  ;; -I/home/user/.conan2/p/sml056dfa7919d57/p/include \
  ;; -L/home/user/.conan2/p/b/fmt3a721e \
  ;; 0ef9ede/p/lib -lfmt -lm  -std=c++20 -Wall -Wextra
  ;; With both pre and post flags
  (conan-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra" "-o /tmp/myElf")
#+end_src




Here is the output from the last line:
#+begin_example
-std=c++20 -Wall -Wextra \
-I/home/user/.conan2/p/b/fmt038de2f1e357a/p/include \
-I/home/user/.conan2/p/sml056dfa7919d57/p/include \
-L/home/user/.conan2/p/b/fmt038de2f1e357a/p/lib -lfmt -lm  -o /tmp/myElf
#+end_example


** Example usage

This installs the Conan packages for fmt and sml with version numbers 10.1.1 and 1.1.9,
respectively, and extracts the library paths for these packages.
It also adds the pre-flags /"-std=c++20 -Wall -Wextra"/ which are optional.
The same goes for post-flags.

A simple and easy to use version , using /c++20/ with fmt and /sml\/1.1.9/, also using post compile flags

#+begin_src example
#+HEADER: :main no
#+HEADER: :flags (conan-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra" "-lto")
#+HEADER: :results output raw :exports both  :noweb yes :eval no-export
#+begin_src cpp
  #define FMT_HEADER_ONLY
  #include <fmt/format.h>
  #include <array>

  int main()
  {
      fmt::print("|{}|{}|\n","hello","conan");

      fmt::print("|{:-<12}\n","");

      std::array v= {1,2,3,255};
      fmt::print("|{:#x}\n", fmt::join(v,"|"));
      return 0;
  }

#+end_src
#+end_src

#+HEADER: :main no
#+HEADER: :flags (conan-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra" "-O3")
#+HEADER: :results output raw :exports both  :noweb yes :eval no-export :tangle user.cpp
#+begin_src cpp
  #define FMT_HEADER_ONLY
  #include <fmt/format.h>
  #include <array>

  int main()
  {
      fmt::print("|{}|{}|\n","hello","conan");

      fmt::print("|{:-<12}\n","");

      std::array v= {1,2,3,255};
      fmt::print("|{:#x}\n", fmt::join(v,"|"));
      return 0;
  }

#+end_src


| hello | conan |     |      |
|-------+-------+-----+------|
|   0x1 |   0x2 | 0x3 | 0xff |



This would be equivalent to if you create the above file and call it /main.cpp/ and run
#+HEADER: :eval never-export  :results output raw :exports both
#+begin_src bash
  cat << EOF > main.cpp
    #define FMT_HEADER_ONLY
    #include <fmt/format.h>
    #include <array>

    int main()
    {
        fmt::print("|{}|{}|\n","hello","conan");

        fmt::print("|{:-<12}\n","");

        std::array v= {1,2,3,255};
        fmt::print("|{:#x}\n", fmt::join(v,"|"));
        return 0;
    }
  EOF


  g++ -std=c++20 -Wall -Wextra -I/home/user/.conan2/p/b/fmt038de2f1e357a/p/include \
      -I/home/user/.conan2/p/sml056dfa7919d57/p/include \
      -L/home/user/.conan2/p/b/fmt038de2f1e357a/p/lib \
      -lfmt -lm -flto\
      main.cpp -o out
  ./out
#+end_src

| hello | conan |     |      |
|-------+-------+-----+------|
|   0x1 |   0x2 | 0x3 | 0xff |




#+begin_src example
  #+HEADER: :includes <fmt/format.h>  :main no
  #+HEADER: :libs (conan-install "fmt/10.1.1" 'libs)
  #+HEADER: :flags (conan-install "fmt/10.1.1 sml/1.1.9" 'include "-std=c++20 -Wall -Wextra")
  #+HEADER: :results output raw :exports both  :noweb yes :eval no-export
  #+begin_src cpp
    int main(int argc, char *argv[])
    {
        fmt::print("|{}|{}|","hello","conan");
        return 0;
    }

  '#+end_src
#+end_src



** Example run

  #+HEADER: :includes <fmt/format.h> :main no
  #+HEADER: :libs (elisp-install "fmt/10.1.1" 'libs)
  #+HEADER: :flags (elisp-install "fmt/10.1.1 sml/1.1.6" 'include "-std=c++20 -Wall -Wextra"))
  #+HEADER: :results output raw :exports both  :noweb yes :eval no-export
  #+begin_src cpp
    int main()
    {
        fmt::print("|{}|{}|","hello","conan");
        return 0;
    }

  #+end_src

  | hello | conan |


** Note

This function assumes that Conan 2.0 is installed and configured on the system and that the
necessary Conan packages are available.


* Inner working

The ~conan-install~ will generate a ~conanfile.txt~ with the
provided content (libs) in a temporary directory/file starting with
~conan-install-~ . It then runs /conan install/ and extracts the
output in a directory called ~out~ (still in the temporary directory).
The conan generator ~PkgConfigDeps~ is used, which will provide a
~pkg-config~ file. So by calling ~pkg-config~ with the ~out~ path the
flags are retained and provided to the caller.

Here is an example from the ~/tmp~ directory.
#+begin_src example
tmp
├── conan-install-BADRG2
│   ├── conanfile.txt
│   └── out
│       ├── conanbuildenv-release-x86_64.sh
│       ├── conanbuild.sh
│       ├── conanrunenv-release-x86_64.sh
│       ├── conanrun.sh
│       ├── deactivate_conanbuild.sh
│       ├── deactivate_conanrun.sh
│       ├── fmt-_fmt.pc
│       ├── fmt.pc
│       └── sml.pc
#+end_src

So by running:

#+HEADER: :eval never-export  :results output :wrap example :exports both
#+begin_src bash :dir "/"
PKG_CONFIG_PATH=/tmp/conan-install-BADRG2/out pkgconf --libs --cflags fmt
#+end_src

We get the flags from the conan install.
#+begin_example
-I/home/user/.conan2/p/b/fmt3a721e0ef9ede/p/include -L/home/user/.conan2/p/b/fmt3a721e0ef9ede/p/lib -lfmt -lm
#+end_example
