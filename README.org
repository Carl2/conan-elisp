* Conan elisp

The idea is to create something to use to get flags when compiling org-mode source


* col/conan-elisp-install

Install Conan packages for `libs', with `flags' specifying the options.

** Usage
~(col/conan-elisp-install CONAN-LIBS-LIST FLAGS &optional pre-flags post-flags)~

CONAN-LIBS-LIST is a string containing the names and versions of the Conan
packages to be installed, separated by space. For example: "fmt/8.1.1 zlib/1.2.13".

FLAGS is expected to be one of the symbols 'include, 'libs, 'both, or 'all.
These options specify which Conan package information to extract:

- 'include extracts the include paths for the Conan packages.
- 'libs extracts the library paths for the Conan packages.
- 'both extracts both the include and library paths for the Conan packages.
- 'all is equivalent to 'both.

The function first extracts the Conan package names and versions from CONAN-LIBS-LIST
and calls the `col/conan-install` function to install the packages.
It then extracts the include and/or library paths for the installed packages
based on the FLAGS option, and sets the corresponding Emacs Lisp variables to
these paths.

/pre-flags/ are extra flags to the compiler before the conan library flags.

/post-flags/ are flags which are post the conan library flags


#+HEADER: :eval never-export :wrap example :exports both
#+begin_src emacs-lisp
;; Examples
(col/conan-elisp-install "fmt/10.1.1 sml/1.1.6 zlib/1.2.13" 'all)
;; With pre flags
(col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra")
;; With post flags
(col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'all nil "-std=c++20 -Wall -Wextra")
;; With both pre and post flags
(col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra" "-o /tmp/myElf")
#+end_src

Here is the output from the last line:
#+begin_example
-std=c++20 -Wall -Wextra -I/home/calle/.conan2/p/b/fmt038de2f1e357a/p/include -I/home/calle/.conan2/p/sml056dfa7919d57/p/include -L/home/calle/.conan2/p/b/fmt038de2f1e357a/p/lib -lfmt -lm  -o /tmp/myElf
#+end_example


** Example usage

This installs the Conan packages for fmt and sml with version numbers 10.1.1 and 1.1.9,
respectively, and extracts the library paths for these packages.
It also adds the pre-flags /"-std=c++20 -Wall -Wextra"/ which are optional.
The same goes for post-flags.

A simple and easy to use version , using /c++20/ with fmt and /sml\/1.1.9/

#+begin_src example
  #+HEADER: :includes <fmt/format.h>  :main no
  #+HEADER: :flags (col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra")
  #+HEADER: :results output raw :exports both  :noweb yes :eval no-export
  #+begin_src cpp
    int main(int argc, char *argv[])
    {
        fmt::print("|{}|{}|","hello","conan");
        return 0;
    }

  '#+end_src
#+end_src

#+HEADER: :main no
#+HEADER: :flags (col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'all "-std=c++20 -Wall -Wextra" "-flto")
#+HEADER: :results output raw :exports both  :noweb yes :eval no-export
#+begin_src cpp
  #define FMT_HEADER_ONLY
  #include <fmt/format.h>
  #include <array>

  int main()
  {
      fmt::print("|{}|{}|\n","hello","conan");

      fmt::print("|{:-<12}\n","");

      std::array v= {1,2,3,255};
      fmt::print("|{:#x}\n", fmt::join(v,"|"));
      return 0;
  }

#+end_src

#+RESULTS:
| hello | conan |     |      |
|-------+-------+-----+------|
|   0x1 |   0x2 | 0x3 | 0xff |






#+begin_src example
  #+HEADER: :includes <fmt/format.h>  :main no
  #+HEADER: :libs (col/conan-elisp-install "fmt/10.1.1" 'libs)
  #+HEADER: :flags (col/conan-elisp-install "fmt/10.1.1 sml/1.1.9" 'include "-std=c++20 -Wall -Wextra")
  #+HEADER: :results output raw :exports both  :noweb yes :eval no-export
  #+begin_src cpp
    int main(int argc, char *argv[])
    {
        fmt::print("|{}|{}|","hello","conan");
        return 0;
    }

  '#+end_src
#+end_src



** Example run

  #+HEADER: :includes <fmt/format.h> :main no
  #+HEADER: :libs (col/conan-elisp-install "fmt/10.1.1" 'libs)
  #+HEADER: :flags (col/conan-elisp-install "fmt/10.1.1 sml/1.1.6" 'include "-std=c++20 -Wall -Wextra"))
  #+HEADER: :results output raw :exports both  :noweb yes :eval no-export
  #+begin_src cpp
    int main()
    {
        fmt::print("|{}|{}|","hello","conan");
        return 0;
    }

  #+end_src

  #+RESULTS:
  | hello | conan |




** Note

This function assumes that Conan 2.0 is installed on the system and that the
necessary Conan packages are available.
